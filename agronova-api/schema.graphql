# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type AzureADIntegration {
  id: ID!
  adUserId: String
  adTenantId: String
  roleMapping: String
  accessTokenValidity: Boolean
  loginHistory: String
}

input AzureADIntegrationWhereUniqueInput {
  id: ID
  adUserId: String
}

input AzureADIntegrationWhereInput {
  AND: [AzureADIntegrationWhereInput!]
  OR: [AzureADIntegrationWhereInput!]
  NOT: [AzureADIntegrationWhereInput!]
  id: IDFilter
  adUserId: StringFilter
  adTenantId: StringFilter
  roleMapping: StringFilter
  accessTokenValidity: BooleanFilter
  loginHistory: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input AzureADIntegrationOrderByInput {
  id: OrderDirection
  adUserId: OrderDirection
  adTenantId: OrderDirection
  roleMapping: OrderDirection
  accessTokenValidity: OrderDirection
  loginHistory: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AzureADIntegrationUpdateInput {
  adUserId: String
  adTenantId: String
  roleMapping: String
  accessTokenValidity: Boolean
  loginHistory: String
}

input AzureADIntegrationUpdateArgs {
  where: AzureADIntegrationWhereUniqueInput!
  data: AzureADIntegrationUpdateInput!
}

input AzureADIntegrationCreateInput {
  adUserId: String
  adTenantId: String
  roleMapping: String
  accessTokenValidity: Boolean
  loginHistory: String
}

type User {
  id: ID!
  fullName: String
  email: String
  phoneNumber: String
  profilePicture: String
  accountStatus: String
  adAuthenticationStatus: Boolean
}

input UserWhereUniqueInput {
  id: ID
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  fullName: StringFilter
  email: StringFilter
  phoneNumber: StringFilter
  profilePicture: StringFilter
  accountStatus: StringNullableFilter
  adAuthenticationStatus: BooleanFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  fullName: OrderDirection
  email: OrderDirection
  phoneNumber: OrderDirection
  profilePicture: OrderDirection
  accountStatus: OrderDirection
  adAuthenticationStatus: OrderDirection
}

input UserUpdateInput {
  fullName: String
  email: String
  phoneNumber: String
  profilePicture: String
  accountStatus: String
  adAuthenticationStatus: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  fullName: String
  email: String
  phoneNumber: String
  profilePicture: String
  accountStatus: String
  adAuthenticationStatus: Boolean
}

type Irrigation {
  id: ID!
  crop_id: Crop
  date: DateTime
  duration: Int
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input IrrigationWhereUniqueInput {
  id: ID
}

input IrrigationWhereInput {
  AND: [IrrigationWhereInput!]
  OR: [IrrigationWhereInput!]
  NOT: [IrrigationWhereInput!]
  id: IDFilter
  crop_id: CropWhereInput
  date: DateTimeFilter
  duration: IntFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input IrrigationOrderByInput {
  id: OrderDirection
  date: OrderDirection
  duration: OrderDirection
}

input IrrigationUpdateInput {
  crop_id: CropRelateToOneForUpdateInput
  date: DateTime
  duration: Int
}

input CropRelateToOneForUpdateInput {
  create: CropCreateInput
  connect: CropWhereUniqueInput
  disconnect: Boolean
}

input IrrigationUpdateArgs {
  where: IrrigationWhereUniqueInput!
  data: IrrigationUpdateInput!
}

input IrrigationCreateInput {
  crop_id: CropRelateToOneForCreateInput
  date: DateTime
  duration: Int
}

input CropRelateToOneForCreateInput {
  create: CropCreateInput
  connect: CropWhereUniqueInput
}

type Crop {
  id: ID!
  user_id: User
  crop_name: String
  location: String
}

input CropWhereUniqueInput {
  id: ID
}

input CropWhereInput {
  AND: [CropWhereInput!]
  OR: [CropWhereInput!]
  NOT: [CropWhereInput!]
  id: IDFilter
  user_id: UserWhereInput
  crop_name: StringFilter
  location: StringFilter
}

input CropOrderByInput {
  id: OrderDirection
  crop_name: OrderDirection
  location: OrderDirection
}

input CropUpdateInput {
  user_id: UserRelateToOneForUpdateInput
  crop_name: String
  location: String
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CropUpdateArgs {
  where: CropWhereUniqueInput!
  data: CropUpdateInput!
}

input CropCreateInput {
  user_id: UserRelateToOneForCreateInput
  crop_name: String
  location: String
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Statistic {
  id: ID!
  crop_id: Crop
  timestamp: CalendarDay
  soil_moisture: Float
  air_humidity: Float
  air_temperature: Float
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input StatisticWhereUniqueInput {
  id: ID
}

input StatisticWhereInput {
  AND: [StatisticWhereInput!]
  OR: [StatisticWhereInput!]
  NOT: [StatisticWhereInput!]
  id: IDFilter
  crop_id: CropWhereInput
  timestamp: CalendarDayFilter
  soil_moisture: FloatFilter
  air_humidity: FloatFilter
  air_temperature: FloatFilter
}

input CalendarDayFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input StatisticOrderByInput {
  id: OrderDirection
  timestamp: OrderDirection
  soil_moisture: OrderDirection
  air_humidity: OrderDirection
  air_temperature: OrderDirection
}

input StatisticUpdateInput {
  crop_id: CropRelateToOneForUpdateInput
  timestamp: CalendarDay
  soil_moisture: Float
  air_humidity: Float
  air_temperature: Float
}

input StatisticUpdateArgs {
  where: StatisticWhereUniqueInput!
  data: StatisticUpdateInput!
}

input StatisticCreateInput {
  crop_id: CropRelateToOneForCreateInput
  timestamp: CalendarDay
  soil_moisture: Float
  air_humidity: Float
  air_temperature: Float
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAzureADIntegration(data: AzureADIntegrationCreateInput!): AzureADIntegration
  createAzureADIntegrations(data: [AzureADIntegrationCreateInput!]!): [AzureADIntegration]
  updateAzureADIntegration(where: AzureADIntegrationWhereUniqueInput!, data: AzureADIntegrationUpdateInput!): AzureADIntegration
  updateAzureADIntegrations(data: [AzureADIntegrationUpdateArgs!]!): [AzureADIntegration]
  deleteAzureADIntegration(where: AzureADIntegrationWhereUniqueInput!): AzureADIntegration
  deleteAzureADIntegrations(where: [AzureADIntegrationWhereUniqueInput!]!): [AzureADIntegration]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createIrrigation(data: IrrigationCreateInput!): Irrigation
  createIrrigations(data: [IrrigationCreateInput!]!): [Irrigation]
  updateIrrigation(where: IrrigationWhereUniqueInput!, data: IrrigationUpdateInput!): Irrigation
  updateIrrigations(data: [IrrigationUpdateArgs!]!): [Irrigation]
  deleteIrrigation(where: IrrigationWhereUniqueInput!): Irrigation
  deleteIrrigations(where: [IrrigationWhereUniqueInput!]!): [Irrigation]
  createCrop(data: CropCreateInput!): Crop
  createCrops(data: [CropCreateInput!]!): [Crop]
  updateCrop(where: CropWhereUniqueInput!, data: CropUpdateInput!): Crop
  updateCrops(data: [CropUpdateArgs!]!): [Crop]
  deleteCrop(where: CropWhereUniqueInput!): Crop
  deleteCrops(where: [CropWhereUniqueInput!]!): [Crop]
  createStatistic(data: StatisticCreateInput!): Statistic
  createStatistics(data: [StatisticCreateInput!]!): [Statistic]
  updateStatistic(where: StatisticWhereUniqueInput!, data: StatisticUpdateInput!): Statistic
  updateStatistics(data: [StatisticUpdateArgs!]!): [Statistic]
  deleteStatistic(where: StatisticWhereUniqueInput!): Statistic
  deleteStatistics(where: [StatisticWhereUniqueInput!]!): [Statistic]
}

type Query {
  azureADIntegration(where: AzureADIntegrationWhereUniqueInput!): AzureADIntegration
  azureADIntegrations(where: AzureADIntegrationWhereInput! = {}, orderBy: [AzureADIntegrationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AzureADIntegrationWhereUniqueInput): [AzureADIntegration!]
  azureADIntegrationsCount(where: AzureADIntegrationWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  irrigation(where: IrrigationWhereUniqueInput!): Irrigation
  irrigations(where: IrrigationWhereInput! = {}, orderBy: [IrrigationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: IrrigationWhereUniqueInput): [Irrigation!]
  irrigationsCount(where: IrrigationWhereInput! = {}): Int
  crop(where: CropWhereUniqueInput!): Crop
  crops(where: CropWhereInput! = {}, orderBy: [CropOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CropWhereUniqueInput): [Crop!]
  cropsCount(where: CropWhereInput! = {}): Int
  statistic(where: StatisticWhereUniqueInput!): Statistic
  statistics(where: StatisticWhereInput! = {}, orderBy: [StatisticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StatisticWhereUniqueInput): [Statistic!]
  statisticsCount(where: StatisticWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
