# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type AzureADIntegration {
  id: ID!
  adUserId: String
  adTenantId: String
  roleMapping: String
  accessTokenValidity: Boolean
  loginHistory: String
}

input AzureADIntegrationWhereUniqueInput {
  id: ID
  adUserId: String
}

input AzureADIntegrationWhereInput {
  AND: [AzureADIntegrationWhereInput!]
  OR: [AzureADIntegrationWhereInput!]
  NOT: [AzureADIntegrationWhereInput!]
  id: IDFilter
  adUserId: StringFilter
  adTenantId: StringFilter
  roleMapping: StringFilter
  accessTokenValidity: BooleanFilter
  loginHistory: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input AzureADIntegrationOrderByInput {
  id: OrderDirection
  adUserId: OrderDirection
  adTenantId: OrderDirection
  roleMapping: OrderDirection
  accessTokenValidity: OrderDirection
  loginHistory: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AzureADIntegrationUpdateInput {
  adUserId: String
  adTenantId: String
  roleMapping: String
  accessTokenValidity: Boolean
  loginHistory: String
}

input AzureADIntegrationUpdateArgs {
  where: AzureADIntegrationWhereUniqueInput!
  data: AzureADIntegrationUpdateInput!
}

input AzureADIntegrationCreateInput {
  adUserId: String
  adTenantId: String
  roleMapping: String
  accessTokenValidity: Boolean
  loginHistory: String
}

type User {
  id: ID!
  fullName: String
  email: String
  phoneNumber: String
  billing_plan: BillingPlan
  ranch_id: Ranch
  role_id: Role
  profilePicture: String
  accountStatus: String
  adAuthenticationStatus: Boolean
}

input UserWhereUniqueInput {
  id: ID
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  fullName: StringFilter
  email: StringFilter
  phoneNumber: StringFilter
  billing_plan: BillingPlanWhereInput
  ranch_id: RanchWhereInput
  role_id: RoleWhereInput
  profilePicture: StringFilter
  accountStatus: StringNullableFilter
  adAuthenticationStatus: BooleanFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  fullName: OrderDirection
  email: OrderDirection
  phoneNumber: OrderDirection
  profilePicture: OrderDirection
  accountStatus: OrderDirection
  adAuthenticationStatus: OrderDirection
}

input UserUpdateInput {
  fullName: String
  email: String
  phoneNumber: String
  billing_plan: BillingPlanRelateToOneForUpdateInput
  ranch_id: RanchRelateToOneForUpdateInput
  role_id: RoleRelateToOneForUpdateInput
  profilePicture: String
  accountStatus: String
  adAuthenticationStatus: Boolean
}

input BillingPlanRelateToOneForUpdateInput {
  create: BillingPlanCreateInput
  connect: BillingPlanWhereUniqueInput
  disconnect: Boolean
}

input RanchRelateToOneForUpdateInput {
  create: RanchCreateInput
  connect: RanchWhereUniqueInput
  disconnect: Boolean
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  fullName: String
  email: String
  phoneNumber: String
  billing_plan: BillingPlanRelateToOneForCreateInput
  ranch_id: RanchRelateToOneForCreateInput
  role_id: RoleRelateToOneForCreateInput
  profilePicture: String
  accountStatus: String
  adAuthenticationStatus: Boolean
}

input BillingPlanRelateToOneForCreateInput {
  create: BillingPlanCreateInput
  connect: BillingPlanWhereUniqueInput
}

input RanchRelateToOneForCreateInput {
  create: RanchCreateInput
  connect: RanchWhereUniqueInput
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type Irrigation {
  id: ID!
  crop_id: Crop
  start_time: DateTime
  duration_minutes: Int
  scheduled: Boolean
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input IrrigationWhereUniqueInput {
  id: ID
}

input IrrigationWhereInput {
  AND: [IrrigationWhereInput!]
  OR: [IrrigationWhereInput!]
  NOT: [IrrigationWhereInput!]
  id: IDFilter
  crop_id: CropWhereInput
  start_time: DateTimeFilter
  duration_minutes: IntFilter
  scheduled: BooleanFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input IrrigationOrderByInput {
  id: OrderDirection
  start_time: OrderDirection
  duration_minutes: OrderDirection
  scheduled: OrderDirection
}

input IrrigationUpdateInput {
  crop_id: CropRelateToOneForUpdateInput
  start_time: DateTime
  duration_minutes: Int
  scheduled: Boolean
}

input CropRelateToOneForUpdateInput {
  create: CropCreateInput
  connect: CropWhereUniqueInput
  disconnect: Boolean
}

input IrrigationUpdateArgs {
  where: IrrigationWhereUniqueInput!
  data: IrrigationUpdateInput!
}

input IrrigationCreateInput {
  crop_id: CropRelateToOneForCreateInput
  start_time: DateTime
  duration_minutes: Int
  scheduled: Boolean
}

input CropRelateToOneForCreateInput {
  create: CropCreateInput
  connect: CropWhereUniqueInput
}

type Crop {
  id: ID!
  user_id: User
  crop_name: String
  location: String
}

input CropWhereUniqueInput {
  id: ID
}

input CropWhereInput {
  AND: [CropWhereInput!]
  OR: [CropWhereInput!]
  NOT: [CropWhereInput!]
  id: IDFilter
  user_id: UserWhereInput
  crop_name: StringFilter
  location: StringFilter
}

input CropOrderByInput {
  id: OrderDirection
  crop_name: OrderDirection
  location: OrderDirection
}

input CropUpdateInput {
  user_id: UserRelateToOneForUpdateInput
  crop_name: String
  location: String
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CropUpdateArgs {
  where: CropWhereUniqueInput!
  data: CropUpdateInput!
}

input CropCreateInput {
  user_id: UserRelateToOneForCreateInput
  crop_name: String
  location: String
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Statistic {
  id: ID!
  crop_id: Crop
  timestamp: CalendarDay
  soil_moisture: Float
  air_humidity: Float
  air_temperature: Float
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input StatisticWhereUniqueInput {
  id: ID
}

input StatisticWhereInput {
  AND: [StatisticWhereInput!]
  OR: [StatisticWhereInput!]
  NOT: [StatisticWhereInput!]
  id: IDFilter
  crop_id: CropWhereInput
  timestamp: CalendarDayFilter
  soil_moisture: FloatFilter
  air_humidity: FloatFilter
  air_temperature: FloatFilter
}

input CalendarDayFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input StatisticOrderByInput {
  id: OrderDirection
  timestamp: OrderDirection
  soil_moisture: OrderDirection
  air_humidity: OrderDirection
  air_temperature: OrderDirection
}

input StatisticUpdateInput {
  crop_id: CropRelateToOneForUpdateInput
  timestamp: CalendarDay
  soil_moisture: Float
  air_humidity: Float
  air_temperature: Float
}

input StatisticUpdateArgs {
  where: StatisticWhereUniqueInput!
  data: StatisticUpdateInput!
}

input StatisticCreateInput {
  crop_id: CropRelateToOneForCreateInput
  timestamp: CalendarDay
  soil_moisture: Float
  air_humidity: Float
  air_temperature: Float
}

type BillingPlan {
  id: ID!
  billing_plan_name: String
  description: String
  cost: Float
  user: User
}

input BillingPlanWhereUniqueInput {
  id: ID
}

input BillingPlanWhereInput {
  AND: [BillingPlanWhereInput!]
  OR: [BillingPlanWhereInput!]
  NOT: [BillingPlanWhereInput!]
  id: IDFilter
  billing_plan_name: StringFilter
  description: StringFilter
  cost: FloatFilter
  user: UserWhereInput
}

input BillingPlanOrderByInput {
  id: OrderDirection
  billing_plan_name: OrderDirection
  description: OrderDirection
  cost: OrderDirection
}

input BillingPlanUpdateInput {
  billing_plan_name: String
  description: String
  cost: Float
  user: UserRelateToOneForUpdateInput
}

input BillingPlanUpdateArgs {
  where: BillingPlanWhereUniqueInput!
  data: BillingPlanUpdateInput!
}

input BillingPlanCreateInput {
  billing_plan_name: String
  description: String
  cost: Float
  user: UserRelateToOneForCreateInput
}

type FeaturePlan {
  id: ID!
  billing_plan_id: BillingPlan
  feature: String
}

input FeaturePlanWhereUniqueInput {
  id: ID
}

input FeaturePlanWhereInput {
  AND: [FeaturePlanWhereInput!]
  OR: [FeaturePlanWhereInput!]
  NOT: [FeaturePlanWhereInput!]
  id: IDFilter
  billing_plan_id: BillingPlanWhereInput
  feature: StringFilter
}

input FeaturePlanOrderByInput {
  id: OrderDirection
  feature: OrderDirection
}

input FeaturePlanUpdateInput {
  billing_plan_id: BillingPlanRelateToOneForUpdateInput
  feature: String
}

input FeaturePlanUpdateArgs {
  where: FeaturePlanWhereUniqueInput!
  data: FeaturePlanUpdateInput!
}

input FeaturePlanCreateInput {
  billing_plan_id: BillingPlanRelateToOneForCreateInput
  feature: String
}

type CropMedia {
  id: ID!
  crop_id: Crop
  address: String
}

input CropMediaWhereUniqueInput {
  id: ID
}

input CropMediaWhereInput {
  AND: [CropMediaWhereInput!]
  OR: [CropMediaWhereInput!]
  NOT: [CropMediaWhereInput!]
  id: IDFilter
  crop_id: CropWhereInput
  address: StringFilter
}

input CropMediaOrderByInput {
  id: OrderDirection
  address: OrderDirection
}

input CropMediaUpdateInput {
  crop_id: CropRelateToOneForUpdateInput
  address: String
}

input CropMediaUpdateArgs {
  where: CropMediaWhereUniqueInput!
  data: CropMediaUpdateInput!
}

input CropMediaCreateInput {
  crop_id: CropRelateToOneForCreateInput
  address: String
}

type Ranch {
  id: ID!
  ranch_name: String
  description: String
}

input RanchWhereUniqueInput {
  id: ID
}

input RanchWhereInput {
  AND: [RanchWhereInput!]
  OR: [RanchWhereInput!]
  NOT: [RanchWhereInput!]
  id: IDFilter
  ranch_name: StringFilter
  description: StringFilter
}

input RanchOrderByInput {
  id: OrderDirection
  ranch_name: OrderDirection
  description: OrderDirection
}

input RanchUpdateInput {
  ranch_name: String
  description: String
}

input RanchUpdateArgs {
  where: RanchWhereUniqueInput!
  data: RanchUpdateInput!
}

input RanchCreateInput {
  ranch_name: String
  description: String
}

type Role {
  id: ID!
  role_name: String
  description: String
  permissions(where: PermissionWhereInput! = {}, orderBy: [PermissionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PermissionWhereUniqueInput): [Permission!]
  permissionsCount(where: PermissionWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
  role_name: String
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  role_name: StringFilter
  description: StringFilter
  permissions: PermissionManyRelationFilter
}

input PermissionManyRelationFilter {
  every: PermissionWhereInput
  some: PermissionWhereInput
  none: PermissionWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  role_name: OrderDirection
  description: OrderDirection
}

input RoleUpdateInput {
  role_name: String
  description: String
  permissions: PermissionRelateToManyForUpdateInput
}

input PermissionRelateToManyForUpdateInput {
  disconnect: [PermissionWhereUniqueInput!]
  set: [PermissionWhereUniqueInput!]
  create: [PermissionCreateInput!]
  connect: [PermissionWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  role_name: String
  description: String
  permissions: PermissionRelateToManyForCreateInput
}

input PermissionRelateToManyForCreateInput {
  create: [PermissionCreateInput!]
  connect: [PermissionWhereUniqueInput!]
}

type Permission {
  id: ID!
  permission_name: String
  description: String
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoleWhereUniqueInput): [Role!]
  rolesCount(where: RoleWhereInput! = {}): Int
}

input PermissionWhereUniqueInput {
  id: ID
  permission_name: String
}

input PermissionWhereInput {
  AND: [PermissionWhereInput!]
  OR: [PermissionWhereInput!]
  NOT: [PermissionWhereInput!]
  id: IDFilter
  permission_name: StringFilter
  description: StringFilter
  roles: RoleManyRelationFilter
}

input RoleManyRelationFilter {
  every: RoleWhereInput
  some: RoleWhereInput
  none: RoleWhereInput
}

input PermissionOrderByInput {
  id: OrderDirection
  permission_name: OrderDirection
  description: OrderDirection
}

input PermissionUpdateInput {
  permission_name: String
  description: String
  roles: RoleRelateToManyForUpdateInput
}

input RoleRelateToManyForUpdateInput {
  disconnect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

input PermissionUpdateArgs {
  where: PermissionWhereUniqueInput!
  data: PermissionUpdateInput!
}

input PermissionCreateInput {
  permission_name: String
  description: String
  roles: RoleRelateToManyForCreateInput
}

input RoleRelateToManyForCreateInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAzureADIntegration(data: AzureADIntegrationCreateInput!): AzureADIntegration
  createAzureADIntegrations(data: [AzureADIntegrationCreateInput!]!): [AzureADIntegration]
  updateAzureADIntegration(where: AzureADIntegrationWhereUniqueInput!, data: AzureADIntegrationUpdateInput!): AzureADIntegration
  updateAzureADIntegrations(data: [AzureADIntegrationUpdateArgs!]!): [AzureADIntegration]
  deleteAzureADIntegration(where: AzureADIntegrationWhereUniqueInput!): AzureADIntegration
  deleteAzureADIntegrations(where: [AzureADIntegrationWhereUniqueInput!]!): [AzureADIntegration]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createIrrigation(data: IrrigationCreateInput!): Irrigation
  createIrrigations(data: [IrrigationCreateInput!]!): [Irrigation]
  updateIrrigation(where: IrrigationWhereUniqueInput!, data: IrrigationUpdateInput!): Irrigation
  updateIrrigations(data: [IrrigationUpdateArgs!]!): [Irrigation]
  deleteIrrigation(where: IrrigationWhereUniqueInput!): Irrigation
  deleteIrrigations(where: [IrrigationWhereUniqueInput!]!): [Irrigation]
  createCrop(data: CropCreateInput!): Crop
  createCrops(data: [CropCreateInput!]!): [Crop]
  updateCrop(where: CropWhereUniqueInput!, data: CropUpdateInput!): Crop
  updateCrops(data: [CropUpdateArgs!]!): [Crop]
  deleteCrop(where: CropWhereUniqueInput!): Crop
  deleteCrops(where: [CropWhereUniqueInput!]!): [Crop]
  createStatistic(data: StatisticCreateInput!): Statistic
  createStatistics(data: [StatisticCreateInput!]!): [Statistic]
  updateStatistic(where: StatisticWhereUniqueInput!, data: StatisticUpdateInput!): Statistic
  updateStatistics(data: [StatisticUpdateArgs!]!): [Statistic]
  deleteStatistic(where: StatisticWhereUniqueInput!): Statistic
  deleteStatistics(where: [StatisticWhereUniqueInput!]!): [Statistic]
  createBillingPlan(data: BillingPlanCreateInput!): BillingPlan
  createBillingPlans(data: [BillingPlanCreateInput!]!): [BillingPlan]
  updateBillingPlan(where: BillingPlanWhereUniqueInput!, data: BillingPlanUpdateInput!): BillingPlan
  updateBillingPlans(data: [BillingPlanUpdateArgs!]!): [BillingPlan]
  deleteBillingPlan(where: BillingPlanWhereUniqueInput!): BillingPlan
  deleteBillingPlans(where: [BillingPlanWhereUniqueInput!]!): [BillingPlan]
  createFeaturePlan(data: FeaturePlanCreateInput!): FeaturePlan
  createFeaturePlans(data: [FeaturePlanCreateInput!]!): [FeaturePlan]
  updateFeaturePlan(where: FeaturePlanWhereUniqueInput!, data: FeaturePlanUpdateInput!): FeaturePlan
  updateFeaturePlans(data: [FeaturePlanUpdateArgs!]!): [FeaturePlan]
  deleteFeaturePlan(where: FeaturePlanWhereUniqueInput!): FeaturePlan
  deleteFeaturePlans(where: [FeaturePlanWhereUniqueInput!]!): [FeaturePlan]
  createCropMedia(data: CropMediaCreateInput!): CropMedia
  createCropMedias(data: [CropMediaCreateInput!]!): [CropMedia]
  updateCropMedia(where: CropMediaWhereUniqueInput!, data: CropMediaUpdateInput!): CropMedia
  updateCropMedias(data: [CropMediaUpdateArgs!]!): [CropMedia]
  deleteCropMedia(where: CropMediaWhereUniqueInput!): CropMedia
  deleteCropMedias(where: [CropMediaWhereUniqueInput!]!): [CropMedia]
  createRanch(data: RanchCreateInput!): Ranch
  createRanches(data: [RanchCreateInput!]!): [Ranch]
  updateRanch(where: RanchWhereUniqueInput!, data: RanchUpdateInput!): Ranch
  updateRanches(data: [RanchUpdateArgs!]!): [Ranch]
  deleteRanch(where: RanchWhereUniqueInput!): Ranch
  deleteRanches(where: [RanchWhereUniqueInput!]!): [Ranch]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createPermission(data: PermissionCreateInput!): Permission
  createPermissions(data: [PermissionCreateInput!]!): [Permission]
  updatePermission(where: PermissionWhereUniqueInput!, data: PermissionUpdateInput!): Permission
  updatePermissions(data: [PermissionUpdateArgs!]!): [Permission]
  deletePermission(where: PermissionWhereUniqueInput!): Permission
  deletePermissions(where: [PermissionWhereUniqueInput!]!): [Permission]
}

type Query {
  azureADIntegration(where: AzureADIntegrationWhereUniqueInput!): AzureADIntegration
  azureADIntegrations(where: AzureADIntegrationWhereInput! = {}, orderBy: [AzureADIntegrationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AzureADIntegrationWhereUniqueInput): [AzureADIntegration!]
  azureADIntegrationsCount(where: AzureADIntegrationWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  irrigation(where: IrrigationWhereUniqueInput!): Irrigation
  irrigations(where: IrrigationWhereInput! = {}, orderBy: [IrrigationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: IrrigationWhereUniqueInput): [Irrigation!]
  irrigationsCount(where: IrrigationWhereInput! = {}): Int
  crop(where: CropWhereUniqueInput!): Crop
  crops(where: CropWhereInput! = {}, orderBy: [CropOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CropWhereUniqueInput): [Crop!]
  cropsCount(where: CropWhereInput! = {}): Int
  statistic(where: StatisticWhereUniqueInput!): Statistic
  statistics(where: StatisticWhereInput! = {}, orderBy: [StatisticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StatisticWhereUniqueInput): [Statistic!]
  statisticsCount(where: StatisticWhereInput! = {}): Int
  billingPlan(where: BillingPlanWhereUniqueInput!): BillingPlan
  billingPlans(where: BillingPlanWhereInput! = {}, orderBy: [BillingPlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BillingPlanWhereUniqueInput): [BillingPlan!]
  billingPlansCount(where: BillingPlanWhereInput! = {}): Int
  featurePlan(where: FeaturePlanWhereUniqueInput!): FeaturePlan
  featurePlans(where: FeaturePlanWhereInput! = {}, orderBy: [FeaturePlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FeaturePlanWhereUniqueInput): [FeaturePlan!]
  featurePlansCount(where: FeaturePlanWhereInput! = {}): Int
  cropMedia(where: CropMediaWhereUniqueInput!): CropMedia
  cropMedias(where: CropMediaWhereInput! = {}, orderBy: [CropMediaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CropMediaWhereUniqueInput): [CropMedia!]
  cropMediasCount(where: CropMediaWhereInput! = {}): Int
  ranch(where: RanchWhereUniqueInput!): Ranch
  ranches(where: RanchWhereInput! = {}, orderBy: [RanchOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RanchWhereUniqueInput): [Ranch!]
  ranchesCount(where: RanchWhereInput! = {}): Int
  role(where: RoleWhereUniqueInput!): Role
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoleWhereUniqueInput): [Role!]
  rolesCount(where: RoleWhereInput! = {}): Int
  permission(where: PermissionWhereUniqueInput!): Permission
  permissions(where: PermissionWhereInput! = {}, orderBy: [PermissionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PermissionWhereUniqueInput): [Permission!]
  permissionsCount(where: PermissionWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
