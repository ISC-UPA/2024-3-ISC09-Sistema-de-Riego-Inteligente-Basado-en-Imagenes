# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type AzureADIntegration {
  id: ID!
  adUserId: String
  adTenantId: String
  roleMapping: String
  accessTokenValidity: Boolean
  loginHistory: String
}

input AzureADIntegrationWhereUniqueInput {
  id: ID
  adUserId: String
}

input AzureADIntegrationWhereInput {
  AND: [AzureADIntegrationWhereInput!]
  OR: [AzureADIntegrationWhereInput!]
  NOT: [AzureADIntegrationWhereInput!]
  id: IDFilter
  adUserId: StringFilter
  adTenantId: StringFilter
  roleMapping: StringFilter
  accessTokenValidity: BooleanFilter
  loginHistory: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input AzureADIntegrationOrderByInput {
  id: OrderDirection
  adUserId: OrderDirection
  adTenantId: OrderDirection
  roleMapping: OrderDirection
  accessTokenValidity: OrderDirection
  loginHistory: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AzureADIntegrationUpdateInput {
  adUserId: String
  adTenantId: String
  roleMapping: String
  accessTokenValidity: Boolean
  loginHistory: String
}

input AzureADIntegrationUpdateArgs {
  where: AzureADIntegrationWhereUniqueInput!
  data: AzureADIntegrationUpdateInput!
}

input AzureADIntegrationCreateInput {
  adUserId: String
  adTenantId: String
  roleMapping: String
  accessTokenValidity: Boolean
  loginHistory: String
}

type User {
  id: ID!
  fullName: String
  email: String
  phoneNumber: String
  userRole: String
  profilePicture: String
  accountStatus: String
  adAuthenticationStatus: Boolean
}

input UserWhereUniqueInput {
  id: ID
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  fullName: StringFilter
  email: StringFilter
  phoneNumber: StringFilter
  userRole: StringNullableFilter
  profilePicture: StringFilter
  accountStatus: StringNullableFilter
  adAuthenticationStatus: BooleanFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  fullName: OrderDirection
  email: OrderDirection
  phoneNumber: OrderDirection
  userRole: OrderDirection
  profilePicture: OrderDirection
  accountStatus: OrderDirection
  adAuthenticationStatus: OrderDirection
}

input UserUpdateInput {
  fullName: String
  email: String
  phoneNumber: String
  userRole: String
  profilePicture: String
  accountStatus: String
  adAuthenticationStatus: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  fullName: String
  email: String
  phoneNumber: String
  userRole: String
  profilePicture: String
  accountStatus: String
  adAuthenticationStatus: Boolean
}

type Irrigation {
  id: ID!
  id_irrigation: Int
  crop_id: Int
  date: DateTime
  duration: Int
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input IrrigationWhereUniqueInput {
  id: ID
}

input IrrigationWhereInput {
  AND: [IrrigationWhereInput!]
  OR: [IrrigationWhereInput!]
  NOT: [IrrigationWhereInput!]
  id: IDFilter
  id_irrigation: IntFilter
  crop_id: IntFilter
  date: DateTimeFilter
  duration: IntFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input IrrigationOrderByInput {
  id: OrderDirection
  id_irrigation: OrderDirection
  crop_id: OrderDirection
  date: OrderDirection
  duration: OrderDirection
}

input IrrigationUpdateInput {
  id_irrigation: Int
  crop_id: Int
  date: DateTime
  duration: Int
}

input IrrigationUpdateArgs {
  where: IrrigationWhereUniqueInput!
  data: IrrigationUpdateInput!
}

input IrrigationCreateInput {
  id_irrigation: Int
  crop_id: Int
  date: DateTime
  duration: Int
}

type LifeCicle {
  id: ID!
  id_life_cicle: Int
  name: String
}

input LifeCicleWhereUniqueInput {
  id: ID
}

input LifeCicleWhereInput {
  AND: [LifeCicleWhereInput!]
  OR: [LifeCicleWhereInput!]
  NOT: [LifeCicleWhereInput!]
  id: IDFilter
  id_life_cicle: IntFilter
  name: StringFilter
}

input LifeCicleOrderByInput {
  id: OrderDirection
  id_life_cicle: OrderDirection
  name: OrderDirection
}

input LifeCicleUpdateInput {
  id_life_cicle: Int
  name: String
}

input LifeCicleUpdateArgs {
  where: LifeCicleWhereUniqueInput!
  data: LifeCicleUpdateInput!
}

input LifeCicleCreateInput {
  id_life_cicle: Int
  name: String
}

type Sick {
  id: ID!
  id_sickness: Int
  name: String
}

input SickWhereUniqueInput {
  id: ID
}

input SickWhereInput {
  AND: [SickWhereInput!]
  OR: [SickWhereInput!]
  NOT: [SickWhereInput!]
  id: IDFilter
  id_sickness: IntFilter
  name: StringFilter
}

input SickOrderByInput {
  id: OrderDirection
  id_sickness: OrderDirection
  name: OrderDirection
}

input SickUpdateInput {
  id_sickness: Int
  name: String
}

input SickUpdateArgs {
  where: SickWhereUniqueInput!
  data: SickUpdateInput!
}

input SickCreateInput {
  id_sickness: Int
  name: String
}

type Treatment {
  id: ID!
  id_treatments: Int
  name: String
}

input TreatmentWhereUniqueInput {
  id: ID
}

input TreatmentWhereInput {
  AND: [TreatmentWhereInput!]
  OR: [TreatmentWhereInput!]
  NOT: [TreatmentWhereInput!]
  id: IDFilter
  id_treatments: IntFilter
  name: StringFilter
}

input TreatmentOrderByInput {
  id: OrderDirection
  id_treatments: OrderDirection
  name: OrderDirection
}

input TreatmentUpdateInput {
  id_treatments: Int
  name: String
}

input TreatmentUpdateArgs {
  where: TreatmentWhereUniqueInput!
  data: TreatmentUpdateInput!
}

input TreatmentCreateInput {
  id_treatments: Int
  name: String
}

type crops {
  id: ID!
  crop_name: String
  temperature: Float
  humidity: Float
  ph: Float
  status: String
}

input cropsWhereUniqueInput {
  id: ID
}

input cropsWhereInput {
  AND: [cropsWhereInput!]
  OR: [cropsWhereInput!]
  NOT: [cropsWhereInput!]
  id: IDFilter
  crop_name: StringFilter
  temperature: FloatNullableFilter
  humidity: FloatNullableFilter
  ph: FloatNullableFilter
  status: StringFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input cropsOrderByInput {
  id: OrderDirection
  crop_name: OrderDirection
  temperature: OrderDirection
  humidity: OrderDirection
  ph: OrderDirection
  status: OrderDirection
}

input cropsUpdateInput {
  crop_name: String
  temperature: Float
  humidity: Float
  ph: Float
  status: String
}

input cropsUpdateArgs {
  where: cropsWhereUniqueInput!
  data: cropsUpdateInput!
}

input cropsCreateInput {
  crop_name: String
  temperature: Float
  humidity: Float
  ph: Float
  status: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAzureADIntegration(data: AzureADIntegrationCreateInput!): AzureADIntegration
  createAzureADIntegrations(data: [AzureADIntegrationCreateInput!]!): [AzureADIntegration]
  updateAzureADIntegration(where: AzureADIntegrationWhereUniqueInput!, data: AzureADIntegrationUpdateInput!): AzureADIntegration
  updateAzureADIntegrations(data: [AzureADIntegrationUpdateArgs!]!): [AzureADIntegration]
  deleteAzureADIntegration(where: AzureADIntegrationWhereUniqueInput!): AzureADIntegration
  deleteAzureADIntegrations(where: [AzureADIntegrationWhereUniqueInput!]!): [AzureADIntegration]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createIrrigation(data: IrrigationCreateInput!): Irrigation
  createIrrigations(data: [IrrigationCreateInput!]!): [Irrigation]
  updateIrrigation(where: IrrigationWhereUniqueInput!, data: IrrigationUpdateInput!): Irrigation
  updateIrrigations(data: [IrrigationUpdateArgs!]!): [Irrigation]
  deleteIrrigation(where: IrrigationWhereUniqueInput!): Irrigation
  deleteIrrigations(where: [IrrigationWhereUniqueInput!]!): [Irrigation]
  createLifeCicle(data: LifeCicleCreateInput!): LifeCicle
  createLifeCicles(data: [LifeCicleCreateInput!]!): [LifeCicle]
  updateLifeCicle(where: LifeCicleWhereUniqueInput!, data: LifeCicleUpdateInput!): LifeCicle
  updateLifeCicles(data: [LifeCicleUpdateArgs!]!): [LifeCicle]
  deleteLifeCicle(where: LifeCicleWhereUniqueInput!): LifeCicle
  deleteLifeCicles(where: [LifeCicleWhereUniqueInput!]!): [LifeCicle]
  createSick(data: SickCreateInput!): Sick
  createSicks(data: [SickCreateInput!]!): [Sick]
  updateSick(where: SickWhereUniqueInput!, data: SickUpdateInput!): Sick
  updateSicks(data: [SickUpdateArgs!]!): [Sick]
  deleteSick(where: SickWhereUniqueInput!): Sick
  deleteSicks(where: [SickWhereUniqueInput!]!): [Sick]
  createTreatment(data: TreatmentCreateInput!): Treatment
  createTreatments(data: [TreatmentCreateInput!]!): [Treatment]
  updateTreatment(where: TreatmentWhereUniqueInput!, data: TreatmentUpdateInput!): Treatment
  updateTreatments(data: [TreatmentUpdateArgs!]!): [Treatment]
  deleteTreatment(where: TreatmentWhereUniqueInput!): Treatment
  deleteTreatments(where: [TreatmentWhereUniqueInput!]!): [Treatment]
  createcrops(data: cropsCreateInput!): crops
  createCrops(data: [cropsCreateInput!]!): [crops]
  updatecrops(where: cropsWhereUniqueInput!, data: cropsUpdateInput!): crops
  updateCrops(data: [cropsUpdateArgs!]!): [crops]
  deletecrops(where: cropsWhereUniqueInput!): crops
  deleteCrops(where: [cropsWhereUniqueInput!]!): [crops]
}

type Query {
  azureADIntegration(where: AzureADIntegrationWhereUniqueInput!): AzureADIntegration
  azureADIntegrations(where: AzureADIntegrationWhereInput! = {}, orderBy: [AzureADIntegrationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AzureADIntegrationWhereUniqueInput): [AzureADIntegration!]
  azureADIntegrationsCount(where: AzureADIntegrationWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  irrigation(where: IrrigationWhereUniqueInput!): Irrigation
  irrigations(where: IrrigationWhereInput! = {}, orderBy: [IrrigationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: IrrigationWhereUniqueInput): [Irrigation!]
  irrigationsCount(where: IrrigationWhereInput! = {}): Int
  lifeCicle(where: LifeCicleWhereUniqueInput!): LifeCicle
  lifeCicles(where: LifeCicleWhereInput! = {}, orderBy: [LifeCicleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LifeCicleWhereUniqueInput): [LifeCicle!]
  lifeCiclesCount(where: LifeCicleWhereInput! = {}): Int
  sick(where: SickWhereUniqueInput!): Sick
  sicks(where: SickWhereInput! = {}, orderBy: [SickOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SickWhereUniqueInput): [Sick!]
  sicksCount(where: SickWhereInput! = {}): Int
  treatment(where: TreatmentWhereUniqueInput!): Treatment
  treatments(where: TreatmentWhereInput! = {}, orderBy: [TreatmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TreatmentWhereUniqueInput): [Treatment!]
  treatmentsCount(where: TreatmentWhereInput! = {}): Int
  crops(where: cropsWhereInput! = {}, orderBy: [cropsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: cropsWhereUniqueInput): [crops!]
  cropsCount(where: cropsWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
